/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.programacion_proyectofinal;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.util.*;
import java.util.List;

/**
 *
 * @author hiram
 */

/**
 * Clase Buscar_productos
 */
public class Buscar_productos extends javax.swing.JPanel implements ActionListener {
    Arbol arbol = new Arbol();
    List<Producto> productos = new ArrayList<>();
    List<Producto> productosBuscados = new ArrayList<>();
    /**
     * inicia un nuevo formulario Buscar_productos
     */
    public Buscar_productos() {
        initComponents();
        tabla.setDefaultRenderer(Object.class, new RenderImagen());
    }

    /**
     * inicia un nuevo formulario Buscar_productos
     * @param productos
     * @param arbol
     */
    public Buscar_productos(List<Producto> productos, Arbol arbol) {
        initComponents();
        this.productos = productos;
        this.arbol = arbol;
        tabla.setDefaultRenderer(Object.class, new RenderImagen());
        agregarTabla(productos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        principal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        agregar_seccion = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        clave_label = new javax.swing.JLabel();
        clave_t = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        noexiste = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1073, 718));

        principal.setBackground(new java.awt.Color(255, 255, 255));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ³digo", "Nombre", "Cantidad", "Precio", "Imagen"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setRowHeight(70);
        tabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla);

        agregar_seccion.setBackground(new java.awt.Color(237, 240, 242));

        titulo.setBackground(new java.awt.Color(1, 52, 87));
        titulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titulo.setForeground(new java.awt.Color(1, 52, 87));
        titulo.setText("Buscar Productos");

        clave_label.setBackground(new java.awt.Color(1, 52, 87));
        clave_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clave_label.setForeground(new java.awt.Color(1, 52, 87));
        clave_label.setText("Busqueda:");

        clave_t.setBackground(new java.awt.Color(255, 255, 255));
        clave_t.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clave_t.setForeground(new java.awt.Color(0, 0, 0));

        buscar.setBackground(new java.awt.Color(1, 52, 87));
        buscar.setForeground(new java.awt.Color(255, 255, 255));
        buscar.setText("buscar");
        buscar.addActionListener(this);

        noexiste.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        regresar.setBackground(new java.awt.Color(1, 52, 87));
        regresar.setForeground(new java.awt.Color(255, 255, 255));
        regresar.setText("Todos los productos");
        regresar.addActionListener(this);

        javax.swing.GroupLayout agregar_seccionLayout = new javax.swing.GroupLayout(agregar_seccion);
        agregar_seccion.setLayout(agregar_seccionLayout);
        agregar_seccionLayout.setHorizontalGroup(
            agregar_seccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregar_seccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(agregar_seccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agregar_seccionLayout.createSequentialGroup()
                        .addComponent(clave_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clave_t, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscar)
                        .addGap(33, 33, 33)
                        .addComponent(noexiste, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(agregar_seccionLayout.createSequentialGroup()
                        .addComponent(titulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regresar)))
                .addContainerGap())
        );
        agregar_seccionLayout.setVerticalGroup(
            agregar_seccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agregar_seccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(agregar_seccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titulo)
                    .addComponent(regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(agregar_seccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clave_label)
                    .addComponent(clave_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noexiste, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout principalLayout = new javax.swing.GroupLayout(principal);
        principal.setLayout(principalLayout);
        principalLayout.setHorizontalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(principalLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1028, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(agregar_seccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        principalLayout.setVerticalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, principalLayout.createSequentialGroup()
                .addComponent(agregar_seccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1073, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 718, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel agregar_seccion;
    private javax.swing.JButton buscar;
    private javax.swing.JLabel clave_label;
    private javax.swing.JTextField clave_t;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noexiste;
    private javax.swing.JPanel principal;
    private javax.swing.JButton regresar;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables


    /**
     * Metodo para buscar un producto en el ABB por su clave.
     * @param clave la clave del producto a buscar
     * @return el producto encontrado o null si no existe
     */
    public Producto buscarProductoEnABB(int clave) {
        return buscarRecursivo(arbol.getRaiz(), clave);
    }

    /**
     * Agrega las filas necesarias a la tabla de productos utilizando la lista de productos
     * @param productos
     * @throws Exception
     */
    public void agregarTabla(List<Producto> productos) {
        ((javax.swing.table.DefaultTableModel) tabla.getModel()).setRowCount(0);
        for(Producto producto: productos) {
            Object[] fila = new Object[5];
            fila[0] = String.valueOf(producto.getClave());
            fila[1] = producto.getNombre();
            fila[2] = String.valueOf(producto.getCantidad());
            fila[3] = String.valueOf(producto.getPrecio());

            try {
                byte[] imagenProducto = producto.getImagen();
                BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(imagenProducto));

                if (bufferedImage != null) {
                    ImageIcon mFoto = new ImageIcon(bufferedImage.getScaledInstance(70, 70, Image.SCALE_SMOOTH));
                    fila[4] = new JLabel(mFoto);
                } else {
                    fila[4] = "Espero que nunca pase esto";
                }
            } catch (Exception e) {
                System.out.println("Error al procesar la imagen: " + e);
                fila[4] = "Error";
            }

            ((javax.swing.table.DefaultTableModel) tabla.getModel()).addRow(fila);
        }
    }

    /**
     * Metodo para buscar un producto en el ABB por su clave.
     * @param clave la clave del producto a buscar
     * @return el producto encontrado o null si no existe
     */
    private static Producto buscarRecursivo(Nodo nodo, int clave) {
        if (nodo == null) {
            return null; // No encontrado
        }

        if (nodo.producto.getClave() == clave) {
            return nodo.producto; // Producto encontrado
        } else if (clave < nodo.producto.getClave()) {
            return buscarRecursivo(nodo.izquierdo, clave); // Buscar en el subÃ¡rbol izquierdo
        } else {
            return buscarRecursivo(nodo.derecho, clave); // Buscar en el subÃ¡rbol derecho
        }
    }

    /**
     * Metodo para buscar un producto en el ABB por su nombre.
     * @param nombre el nombre del producto a buscar
     * @return el producto encontrado o null si no existe
     */
    private static Producto buscarRecursivoNombre(Nodo nodo, String nombre) {
        if (nodo == null) {
            return null; // No encontrado
        }
        String nombreProducto = nodo.producto.getNombre().trim().toLowerCase();
        String nombreBuscado = nombre.trim().toLowerCase();
        if (nombreProducto.equals(nombreBuscado)) {
            return nodo.producto; // Producto encontrado
        } else if (nombreBuscado.compareTo(nombreProducto) < 0) {
            return buscarRecursivoNombre(nodo.izquierdo, nombreBuscado); // Buscar en el subÃ¡rbol izquierdo
        } else {
            return buscarRecursivoNombre(nodo.derecho, nombreBuscado); // Buscar en el subÃ¡rbol derecho
        }
    }

    /**
     * Metodo maneja los eventos de los botones
     * @param evt
     */
    @Override
    public void actionPerformed(ActionEvent evt) {
        if(evt.getSource() == buscar){
            buscarProducto();
        }
        if(evt.getSource() == regresar){
            agregarTabla(productos);
            noexiste.setText("");
        }
    }

    /**
     * Metodo para buscar un producto en el ABB por su clave o por su nombre
     * @throws NumberFormatException
     */
    public void buscarProducto(){
        productosBuscados.clear();
        if(clave_t.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese una clave o nombre para buscar");
            return;
        }
        try {
            int clave = Integer.parseInt(clave_t.getText());
            Producto producto = buscarProductoEnABB(clave);
            if (producto != null) {
                productosBuscados.add(producto);
                agregarTabla(productosBuscados);
                noexiste.setText("");
            }
        } catch (NumberFormatException e) {
            String nombre = clave_t.getText();
            Producto productoNombre = buscarRecursivoNombre(arbol.getRaiz(), nombre);
            if (productoNombre != null) {
                productosBuscados.add(productoNombre);
                agregarTabla(productosBuscados);
                noexiste.setText("");
            } else {
                noexiste.setText("No existe un producto con ese nombre");
            }
        }
    }
}
